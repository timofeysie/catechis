package org.catechis.file;
/*
 Copyright 2007 Timothy Curchod Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
*/
import java.io.File;
import java.io.Reader;
import java.io.FileWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.io.FileNotFoundException;
import java.util.List;
import java.util.Date;
import java.util.Vector;
import java.util.Locale;
import java.util.Hashtable;
import java.util.ArrayList;
import java.util.Enumeration;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import org.jdom.Element;
import org.jdom.Document;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;

import org.catechis.dto.Word;
import org.catechis.dto.UserInfo;
import org.catechis.dto.SavedTest;
import org.catechis.constants.Constants;
import org.catechis.interfaces.SaveTests;
import org.catechis.EncodeString;
import org.catechis.admin.FileUserUtilities;

/**
*This class was made to create file specific methods for the SaveTests interface.
*<p>This object is not threadsafe. 
*/
public class FileSaveTests implements SaveTests
{
	
	private Vector log;
	private Document doc;
	private String file_name;
	
	
	public FileSaveTests()
	{
		// no arguments here...
		log = new Vector();
	}
	
	public FileSaveTests(String _file_name)
	{
		file_name = _file_name;
		File file = new File(file_name);
		EncodeString encoder = new EncodeString();
		doc = null;
		log = new Vector();
		try
		{
			encoder = new EncodeString();
			SAXBuilder builder = new SAXBuilder();
			Reader reader = encoder.encodeReader(file);
			doc = builder.build(reader);
		} catch (org.jdom.JDOMException j)
		{
			log.add("FileEdit<init> "+j.toString());
		} catch (java.io.IOException i)
		{
			log.add("FileEdit<init> "+i.toString());
		}
	}
		    
	public void save(UserInfo user_info, Vector words, String test_id)
	{
		//String type = wtm.getType();
		String save_file_name = (test_id+".xml");
		String saved_tests_path = new String(user_info.getRootPath()
			+File.separator+Constants.FILES
			+File.separator+user_info.getUserId()
			+File.separator+user_info.getSubject()
			+File.separator+Constants.TESTS
			+File.separator+Constants.SAVED
			+File.separator+save_file_name);
		File file = new File(saved_tests_path);
		Element root = new Element("test_words");
		doc = new Document(root);
		int size = words.size();
		int i = 0;
		while (i<size)
		{
			Word word = (Word)words.get(i);
			Element e = createTestWordElement(word, i); 
			try
			{
				root.addContent(e);
			} catch (java.lang.NullPointerException npe)
			{
			
			}
			i++;
		}
		
		try
		{
			log.add("FileSavedTests.save: path "+saved_tests_path);
		} catch (java.lang.NullPointerException npe)
		{
			//log.add("FileSavedTests.save: path "+user_info.getRootPath());
			//log.add("FileSavedTests.save: id   "+user_info.getUserId());
		}
		writeDocument(saved_tests_path, user_info.getEncoding());
	}
	
	/**
	*	<test_word>
	*		<index></index>
	*		<word_id></word_id>
	*		<category></category>
	*		<text></text>			so that we dont have to load every word
	*		<definition></definition>	when unbinding a test. 
	*	</test_word>
	*/
	private Element createTestWordElement(Word word, int word_index)
	{
		// create main element
	    Element test_word = new Element("test_word");
	    	// create sub-elements
	    Element index = new Element("index");
	    Element word_id = new Element("word_id");
	    Element category = new Element("category");
	    Element text = new Element("text");
	    Element definition = new Element("definition");
	    	// add content to sub-elements
	    index.addContent(Integer.toString(word_index));
	    word_id.addContent(Long.toString(word.getId()));
	    category.addContent(word.getCategory());
	    text.addContent(word.getText());
	    definition.addContent(word.getDefinition());
	    	// add sub-elements to main element
	    test_word.addContent(index);
	    test_word.addContent(word_id);
	    test_word.addContent(category);
	    test_word.addContent(text);
	    test_word.addContent(definition);
	    return test_word;
	}
	
	public void addToSavedTestsList(UserInfo user_info, SavedTest saved_test, String str_id)
	{
		String tests_folder_path = (user_info.getRootPath()
			+File.separator+Constants.FILES
			+File.separator+user_info.getUserId()
			+File.separator+user_info.getSubject()
			+File.separator+Constants.TESTS);
		String saved_files_path = (tests_folder_path+File.separator+"saved tests.xml");
		File saved_files_folder = new File(saved_files_path);
		boolean exists = saved_files_folder.exists();
		if (!exists)
		{
			log.add("FileSavedTests.addToSavedTestsList: no file found at "+saved_files_path);
			// if the file doesn't exist yet.
			FileUserUtilities fut = new FileUserUtilities(user_info.getRootPath());
			fut.createSavedTestsFile(tests_folder_path);
			append(fut.getLog());
		}
		loadFile(saved_files_path);
		Element root = doc.getRootElement();
		Element saved_test_element = bindSavedTest(saved_test, str_id);
		root.addContent(saved_test_element);
		writeDocument(saved_files_path, user_info.getEncoding());
	}
	
	/**
	*
		       test_id;
	private String test_date;
	private String test_name;
	private String test_type;
	private String test_status;
	private String test_format;
	private String creation_time;
	*/
	private Element bindSavedTest(SavedTest saved_test_obj, String str_id)
	{
		// create main element
	    Element saved_test = new Element("saved_test");
	    	// create sub-elements
	    Element test_id       = new Element("test_id");
	    Element test_date     = new Element("test_date");
	    Element test_name     = new Element("test_name");
	    Element test_type     = new Element("test_type");
	    Element test_status   = new Element("test_status");
	    Element test_format   = new Element("test_format");
	    Element creation_time = new Element("creation_time");
	    	// add content to sub-elements
	    test_id.addContent(str_id);
	    test_date.addContent(saved_test_obj.getTestDate());
	    test_name.addContent(saved_test_obj.getTestName());
	    test_type.addContent(saved_test_obj.getTestType());
	    test_status.addContent(saved_test_obj.getTestStatus());
	    test_format.addContent(saved_test_obj.getTestFormat());
	    creation_time.addContent(saved_test_obj.getCreationTime());
	    	// add sub-elements to main element
	    saved_test.addContent(test_id);
	    saved_test.addContent(test_date);
	    saved_test.addContent(test_name);
	    saved_test.addContent(test_type);
	    saved_test.addContent(test_status);
	    saved_test.addContent(test_format);
	    saved_test.addContent(creation_time);
	    return saved_test;
	}
	
	/**
	*Returns a vector saved_test objects from the user/subject/tests/saved tests.xml file..
	*/
	public Hashtable load(UserInfo user_info, String test_id)
	{
		Hashtable saved_tests = new Hashtable();
		String tests_folder_path = (user_info.getRootPath()
			+File.separator+Constants.FILES
			+File.separator+user_info.getUserId()
			+File.separator+user_info.getSubject()
			+File.separator+Constants.TESTS
			+File.separator+Constants.SAVED);
		String saved_files_path = (tests_folder_path+File.separator+test_id+".xml");
	    	loadFile(saved_files_path);
		Element root = doc.getRootElement();
		List list = root.getChildren("test_word");
		int size = list.size();
		int i = 0;
		while(i<size)
		{
			Element saved_test_elem = (Element)list.get(i);
			Word test_word = new Word();
			String index = (String)saved_test_elem.getChildText("index");
			test_word = unbindWord(saved_test_elem);
			saved_tests.put(index, test_word);
			i++;
		}
		return saved_tests;
	}
	
	private Word unbindWord(Element saved_test_elem)
	{
		Word test_word = new Word();
		String index = (String)saved_test_elem.getChildText("index");
		test_word.setId(Long.parseLong(saved_test_elem.getChildText("word_id")));
	    	test_word.setCategory(saved_test_elem.getChildText("category"));
	    	test_word.setText(saved_test_elem.getChildText("text"));
	    	test_word.setDefinition(saved_test_elem.getChildText("definition"));
	    	return test_word;
	}
	
	/**
	*Returns a vector saved_test objects from the user/subject/tests/saved tests.xml file..
	*/
	public Vector getSavedTestsList(UserInfo user_info)
	{
		Vector saved_tests = new Vector();
		String tests_folder_path = (user_info.getRootPath()
			+File.separator+Constants.FILES
			+File.separator+user_info.getUserId()
			+File.separator+user_info.getSubject()
			+File.separator+Constants.TESTS);
		String saved_files_path = (tests_folder_path+File.separator+"saved tests.xml");
	    	loadFile(saved_files_path);
		Element root = doc.getRootElement();
		List list = root.getChildren("saved_test");
		int size = list.size();
		int i = 0;
		while(i<size)
		{
			Element saved_test_elem = (Element)list.get(i);
			SavedTest saved_test = unbindSavedTest(saved_test_elem);
			saved_tests.add(saved_test);
			i++;
		}
		return saved_tests;
	}
	
	/**
	*
	test_id;
	private String test_date;
	private String test_name;
	private String test_type;
	private String test_status;
	private String test_format;
	private String creation_time;
	*/
	private SavedTest unbindSavedTest(Element e)
	{
		SavedTest saved_test = new SavedTest();
		saved_test.setTestId(e.getChildText("test_id"));
		saved_test.setTestDate(e.getChildText("test_date"));
		saved_test.setTestName(e.getChildText("test_name"));
		saved_test.setTestType(e.getChildText("test_type"));
		saved_test.setTestStatus(e.getChildText("test_status"));
		saved_test.setTestFormat(e.getChildText("test_format"));
		saved_test.setCreationTime(e.getChildText("creation_time"));
		return saved_test;
	}
	
	/** load a file
	*/
	public void loadFile(String _file_name)
	{
		file_name = _file_name;
		File file_f = new File(file_name);
		doc = null;
		log = new Vector();
		log.add("FileSavedTests.loadFile "+ file_name);
		try
		{
			EncodeString encoder = new EncodeString();
			SAXBuilder builder = new SAXBuilder();
			Reader reader = encoder.encodeReader(file_f);
			doc = builder.build(reader);
		} catch (org.jdom.JDOMException j)
		{
			log.add(j.toString());
		} catch (java.io.FileNotFoundException fnfe)
		{
			log.add(fnfe.toString());
		} catch (java.io.IOException i)
		{
			log.add(i.toString());
		}
	}
	
	/**
	*<p>Write document with no encoding.</p>
	*/
	public void writeDocument(String file_name, Document doc2)
	{
		try
		{
			XMLOutputter outputter = new XMLOutputter("  ", false);
			FileWriter writer = new FileWriter(file_name);
			outputter.output(doc2, writer);
			writer.close();
		} catch (java.io.IOException e)
		{
			e.printStackTrace();
			log.add("FileCategories.writeDocument: ioe for "+file_name);
		}
		//context.log("CreateJDOMList.writeDocument: 1 "+file_name);
	}
	
	/**
	*<p>Write document with encoding.</p>
	*<p>XMLOutputter(java.lang.String indent, boolean newlines, java.lang.String encoding)</p>
	*/	
	public void writeDocument(String file_name, String encoding)
	{
		//log.add("JDOMSolution.writeDocument: writing "+file_name+" ...");
		if (doc==null)
		{
			//log.add("JDOMSolution.writeDocument: 2 doc is null");
		}
		try
		{
			XMLOutputter outputter = new XMLOutputter("  ", false, encoding);
			FileOutputStream fos = new FileOutputStream(file_name);
			OutputStreamWriter osw = new OutputStreamWriter(fos, encoding);
			outputter.output(doc, osw);
			//log.add("JDOMSolution.writeDocument: "+file_name);
			osw.close();
		} catch (java.io.UnsupportedEncodingException uee)
		{
			log.add("JDOMSolution.writeDocument: euu error "+encoding);
			uee.printStackTrace();
		}catch (java.io.IOException e)
		{
			log.add("JDOMSolution.writeDocument: io error");
			e.printStackTrace();
		}
		//log.add("JDOMSolution.writeDocument: did it work?");
		//log.add("");
	}
	
	/** deguggin */
	public Vector getLog()
	{
		return log;
	}
	
	public void append(Vector v)
	{
		int size = v.size();
		int i = 0;
		while (i<size)
		{
			log.add(v.get(i));
			i++;
		}
	}
}
