package org.catechis.file;
/*
 Copyright 2006 Timothy Curchod Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
*/
import java.util.Arrays;
import java.util.Set;
import java.util.Date;
import java.util.Vector;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Enumeration;
import java.io.File;
import java.io.IOException;
import org.catechis.Storage;
import org.catechis.Domartin;
import org.catechis.Transformer;
import org.catechis.WordTestDateUtility;
import org.catechis.constants.Constants;
import org.catechis.dto.Word;
import org.catechis.dto.Test;
import org.catechis.dto.WordNextTestDate;
import org.catechis.dto.WordLastTestDates;
import org.catechis.file.FileJDOMWordLists;
import org.catechis.constants.Constants;

/**
*A rahter important class to get the next word that needs to be tested.
*/
public class WordNextTestDates
{
	
	//private Vector log;
	private String next_test_type;
	
	private WordNextTestDate wntd;
	
	private int number_of_waiting_reading_tests;
	
	private int number_of_waiting_writing_tests;
	
	private String words_next_test_date_file_name;
	
	public WordNextTestDates()
	{
		log = new Vector();
		log.add("WordNextTestDates");
		next_test_type = new String();
	}

	/**
	*Return the next word either reading or writing based on the the current time.
	*<p>This should be the most distant time represented by a file named after its date in milliseconds.
	*<p>First this method must get the most distant test file, then it must find
	* the word object and return that.
	*/
	public Word getNextTestWord(String user_id, String current_dir, String time, String subject)
	{
		log.add("WordNextTestDates.getNextTestWord: log ********");
		log.add("time "+time);
		String path_to_reading_files = getPathToFiles(user_id, current_dir, "wntd", Constants.READING, subject);
		String path_to_writing_files = getPathToFiles(user_id, current_dir, "wntd", Constants.WRITING, subject);
		File reading_files = new File(path_to_reading_files);
		File writing_files = new File(path_to_writing_files);
		String [] reading_file_names = reading_files.list();
		Arrays.sort(reading_file_names);
		String [] writing_file_names = writing_files.list();
		Arrays.sort(writing_file_names);
		log.add("reading_file_names "+reading_file_names.length+" writing_file_names "+writing_file_names.length);
		// do we need to sort these? test it!
		String first_reading_file = Domartin.getFileWithoutExtension(reading_file_names [0]);
		String first_writing_file = Domartin.getFileWithoutExtension(writing_file_names [0]);
		log.add("1st reading file "+first_reading_file+" 1st writing file "+first_writing_file);
		String and_the_winner_is = WordTestDateUtility.getEarlierTime(first_reading_file, first_writing_file);
		log.add("remote date "+Transformer.getLongDateFromMilliseconds(and_the_winner_is));
		next_test_type = Constants.READING; 
		if (and_the_winner_is.equals(first_writing_file))
		{
			next_test_type = Constants.WRITING;
		}
		Word next_word = new Word();
		if (Long.parseLong(and_the_winner_is) > Long.parseLong(time))
		{
			return null;
		} else
		{
			words_next_test_date_file_name = and_the_winner_is;
			log.add("type "+next_test_type);
			log.add("and_the_winner_is "+and_the_winner_is);		// file id without the .xml, which is added in fjdomwl
			log.add("FileJDOMWordLists log -------- ");
			try
			{
				FileJDOMWordLists fjdomwl = new FileJDOMWordLists();
				String path_to_file = getPathToFiles(user_id, current_dir, "wntd", next_test_type, subject);
				String full_path = addFileNameWithExtension(path_to_file, and_the_winner_is, ".xml");
				log.add("path - "+full_path);
				wntd = fjdomwl.getWordNextTestDateObject(full_path);
				append(fjdomwl.getLog());
				log.add("WordNextTestDate object -------- ");
				append(Transformer.createTable(wntd));				//search_id null- category null
				String wltd_file_key = wntd.getWltdFileKey();
				String category = wntd.getCategory();
				String word_id = wntd.getWordId();
				next_word = fjdomwl.getSpecificWord(word_id, category, user_id, current_dir);
			} catch (java.lang.NullPointerException npe)
			{
				System.err.println("npe!");
			}
		}
		return next_word;
	}
	
	/**
	*Return the next word either reading or writing based on the the current time.
	*<p>This should be the most distant time represented by a file named after its date in milliseconds.
	*<p>First this method must get the most distant test file, then it must find
	* the word object and return that.
	*/
	public Word getSpecificNextTestWord(String user_id, String current_dir, String time, String subject, String type)
	{
		log.add("WordNextTestDates.getNextTestWord: log -------- ");
		log.add("time "+time);
		String path_to_files = getPathToFiles(user_id, current_dir, "wntd", type, subject);
		File files = new File(path_to_files);
		String [] file_names = files.list();
		printFiles(file_names);
		// do we need to sort the list?
		//ArrayList list = new ArrayList();
		//ArrayList sorted_list = Domartin.sortList(list);
		words_next_test_date_file_name = Domartin.getFileWithoutExtension(file_names [file_names.length-1]);
		log.add("remote date "+Transformer.getLongDateFromMilliseconds(words_next_test_date_file_name));
		next_test_type = type;
		log.add("type "+next_test_type);
		log.add("and_the_winner_is "+words_next_test_date_file_name);		// file id without the .xml, which is added in fjdomwl
		log.add("FileJDOMWordLists log -------- ");
		FileJDOMWordLists fjdomwl = new FileJDOMWordLists();
		String full_path = addFileNameWithExtension(path_to_files, words_next_test_date_file_name, ".xml");
		wntd = fjdomwl.getWordNextTestDateObject(full_path);		// this memeber obj can be retrieved if needed.
		append(fjdomwl.getLog());
		log.add("WordNextTestDate object -------- ");
		append(Transformer.createTable(wntd));				//search_id null- category null
		String wltd_file_key = wntd.getWltdFileKey();
		String category = wntd.getCategory();
		String word_id = wntd.getWordId();
		log.add("WordNextTestDate cat -------- "+category);
		Word next_word = fjdomwl.getSpecificWord(word_id, category, user_id, current_dir);
		Vector waiting_tests = getWaitingTests(current_dir, user_id, type, subject);
		if (type.equals(Constants.READING))
		{
			number_of_waiting_reading_tests = waiting_tests.size();
		} else
		{
			number_of_waiting_writing_tests = waiting_tests.size();
		}
		return next_word;
	}
	
	/**
	*Return the path to a directory like user_id/vocab/lists/wntd or wltd.
	*/
	public String getPathToFiles(String user_id, String current_dir, String last_dir_name, String type, String subject)
	{
		String user_folder_path = (current_dir+File.separator+"files"+File.separator+user_id);
		String subj_folder_path = (user_folder_path+File.separator+subject);
		String lists_folder_path = (subj_folder_path+File.separator+"lists");
		String wtd_folder_path = (lists_folder_path+File.separator+last_dir_name+" "+type);
		return wtd_folder_path;
	}
	
	/**
	*Return the path to a directory like user_id/vocab/lists/wntd or wltd.
	*/
	public String addFileNameWithExtension(String path, String file_name, String ext)
	{
		String complete_path = (path+File.separator+file_name+ext);
		return complete_path;
	}
	
	/**
	*Returns the file names in the wntd folder minus the ones with a date in milliseconds after the current date.
	*/
	public Vector getWaitingTests(String current_dir, String user_id, String type, String subject)
	{
		String user_folder_path = (current_dir+File.separator+"files"+File.separator+user_id);
		String subj_folder_path = (user_folder_path+File.separator+subject);
		String lists_folder_path = (subj_folder_path+File.separator+"lists");
		String wtd_folder_path = (lists_folder_path+File.separator+"wntd "+type);
		log.add("WordNextTestDates.getWaitingTests: path "+wtd_folder_path);
		File folder = new File(wtd_folder_path);
		String [] files = folder.list();
		Date now = new Date();
		long this_instant = now.getTime();
		Vector results = new Vector();
		int i = 0;
		int l = 0;
		try
		{
			l = files.length;
		} catch (java.lang.NullPointerExcetion npe)
		{
			// l stays at 0
		}
		log.add("WordNextTestDates.getWaitingTests: length "+l);
		while (i<l)
		{
			String file_w_ext = files [i];
			String file = Domartin.getFileWithoutExtension(file_w_ext);
			long file_long = Long.parseLong(file);
			long diff = file_long-this_instant;
			String str_diff = Domartin.getElapsedTime(Long.toString(diff));
			//log.add("diff "+diff+" - "+str_diff);
			if (file_long<this_instant)
			{
				results.add(file);
				log.add("diff "+diff+" - "+str_diff);
			}
			i++;
		}
		return results;
	}
	
	public String getNextTestType()
	{
		return next_test_type;
	}
	
	/**
	*This method arrange with FileJDOMWordLists to get the WordNextTestDate object when the caller knows the file name
	* and the type of the test.
	*/
	public WordNextTestDate getWordNextTestDate(String current_dir, String user_id, String next_test_type, String next_test_time, String subject)
	{
		FileJDOMWordLists fjdomwl = new FileJDOMWordLists();
		String path_to_file = getPathToFiles(user_id, current_dir, "wntd", next_test_type, subject);
		String full_path = addFileNameWithExtension(path_to_file, next_test_time, ".xml");
		WordNextTestDate wntd = fjdomwl.getWordNextTestDateObject(full_path);
		return wntd;
	}
	
	/** This object holds the words id, and the id of the words last test date.*/
	public WordNextTestDate getWordNextTestDate()
	{
		return wntd;
	}
	
	public int getNumberOfWaitingReadingTests()
	{
		return number_of_waiting_reading_tests;
	}
	
	public int getNumberOfWaitingWritingTests()
	{
		return number_of_waiting_writing_tests;
	}
	
	public String getWordsNextTextDateFileName()
	{
		return words_next_test_date_file_name;
	}
	
	/** DEGUGGING */
	private Vector log;
	
	public Vector getLog()
	{
		return log;
	}
	
	public void resetLog()
	{
		log = new Vector();
	}
	
	public void append(Vector v)
	{
		int size = v.size();
		int i = 0;
		while (i<size)
		{
			log.add("WordNextTestDate.log: "+v.get(i));
			i++;
		}
	}
	
	private void printTests(Word word)
	{
		Test all_tests[] = word.getTests();
		int size = all_tests.length;
		int i = 0;
		while (i<size)
		{
			Test test = all_tests[i];
			log.add(" "+i+" "+test.getName()+" "+test.getDate()+" "+test.getGrade());
			i++;
		}
	}
	
	private void printFiles(String[] file_names)
	{
		int len = file_names.length;
		int i = 0;
		while (i<len)
		{
			String file = Domartin.getFileWithoutExtension(file_names [i]);
			log.add("file date "+i+" "+Transformer.getLongDateFromMilliseconds(file));
			i++;
		}
	}

}
